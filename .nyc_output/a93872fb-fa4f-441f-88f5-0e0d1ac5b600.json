{"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/IInsightFacade.ts":{"path":"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":1,"2":0,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/IInsightFacade.ts","sources":["/Users/liuhongkai/CPSC310_project/project_team051/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAUD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c42a20ce2321f2e4948e0ac2cf5abb63350836da","contentHash":"85189f6896e8ddc2d9c988af88f2f71ebabb815a15ca0555f59d6b305302a76b"},"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/InsightFacade.ts":{"path":"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":14},"end":{"line":7,"column":30}},"5":{"start":{"line":8,"column":19},"end":{"line":8,"column":55}},"6":{"start":{"line":9,"column":20},"end":{"line":9,"column":57}},"7":{"start":{"line":10,"column":18},"end":{"line":10,"column":55}},"8":{"start":{"line":12,"column":15},"end":{"line":12,"column":24}},"9":{"start":{"line":13,"column":18},"end":{"line":13,"column":23}},"10":{"start":{"line":17,"column":26},"end":{"line":17,"column":28}},"11":{"start":{"line":18,"column":8},"end":{"line":27,"column":9}},"12":{"start":{"line":19,"column":12},"end":{"line":19,"column":98}},"13":{"start":{"line":20,"column":31},"end":{"line":20,"column":92}},"14":{"start":{"line":21,"column":32},"end":{"line":21,"column":85}},"15":{"start":{"line":22,"column":12},"end":{"line":22,"column":50}},"16":{"start":{"line":23,"column":12},"end":{"line":23,"column":31}},"17":{"start":{"line":26,"column":12},"end":{"line":26,"column":31}},"18":{"start":{"line":30,"column":8},"end":{"line":30,"column":94}},"19":{"start":{"line":31,"column":27},"end":{"line":31,"column":76}},"20":{"start":{"line":32,"column":25},"end":{"line":32,"column":27}},"21":{"start":{"line":33,"column":8},"end":{"line":61,"column":9}},"22":{"start":{"line":34,"column":12},"end":{"line":52,"column":13}},"23":{"start":{"line":35,"column":16},"end":{"line":51,"column":22}},"24":{"start":{"line":36,"column":32},"end":{"line":36,"column":43}},"25":{"start":{"line":37,"column":20},"end":{"line":50,"column":21}},"26":{"start":{"line":38,"column":39},"end":{"line":38,"column":123}},"27":{"start":{"line":39,"column":40},"end":{"line":39,"column":65}},"28":{"start":{"line":40,"column":41},"end":{"line":40,"column":87}},"29":{"start":{"line":41,"column":45},"end":{"line":41,"column":72}},"30":{"start":{"line":42,"column":24},"end":{"line":44,"column":25}},"31":{"start":{"line":43,"column":28},"end":{"line":43,"column":84}},"32":{"start":{"line":45,"column":41},"end":{"line":45,"column":81}},"33":{"start":{"line":46,"column":24},"end":{"line":46,"column":40}},"34":{"start":{"line":49,"column":24},"end":{"line":49,"column":34}},"35":{"start":{"line":53,"column":41},"end":{"line":53,"column":68}},"36":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"37":{"start":{"line":54,"column":25},"end":{"line":54,"column":26}},"38":{"start":{"line":55,"column":16},"end":{"line":55,"column":67}},"39":{"start":{"line":59,"column":12},"end":{"line":59,"column":69}},"40":{"start":{"line":60,"column":12},"end":{"line":60,"column":22}},"41":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"42":{"start":{"line":65,"column":8},"end":{"line":73,"column":9}},"43":{"start":{"line":66,"column":24},"end":{"line":66,"column":52}},"44":{"start":{"line":67,"column":12},"end":{"line":67,"column":50}},"45":{"start":{"line":68,"column":12},"end":{"line":68,"column":66}},"46":{"start":{"line":71,"column":12},"end":{"line":71,"column":57}},"47":{"start":{"line":72,"column":12},"end":{"line":72,"column":22}},"48":{"start":{"line":76,"column":25},"end":{"line":76,"column":27}},"49":{"start":{"line":77,"column":8},"end":{"line":93,"column":11}},"50":{"start":{"line":78,"column":26},"end":{"line":87,"column":55}},"51":{"start":{"line":89,"column":12},"end":{"line":92,"column":13}},"52":{"start":{"line":90,"column":16},"end":{"line":90,"column":282}},"53":{"start":{"line":91,"column":16},"end":{"line":91,"column":39}},"54":{"start":{"line":94,"column":8},"end":{"line":94,"column":24}},"55":{"start":{"line":97,"column":25},"end":{"line":97,"column":27}},"56":{"start":{"line":98,"column":8},"end":{"line":120,"column":11}},"57":{"start":{"line":99,"column":12},"end":{"line":119,"column":13}},"58":{"start":{"line":100,"column":16},"end":{"line":118,"column":22}},"59":{"start":{"line":101,"column":20},"end":{"line":117,"column":21}},"60":{"start":{"line":102,"column":44},"end":{"line":102,"column":70}},"61":{"start":{"line":103,"column":43},"end":{"line":103,"column":66}},"62":{"start":{"line":104,"column":24},"end":{"line":106,"column":25}},"63":{"start":{"line":105,"column":28},"end":{"line":105,"column":91}},"64":{"start":{"line":107,"column":41},"end":{"line":107,"column":105}},"65":{"start":{"line":108,"column":24},"end":{"line":110,"column":25}},"66":{"start":{"line":109,"column":28},"end":{"line":109,"column":89}},"67":{"start":{"line":111,"column":24},"end":{"line":111,"column":73}},"68":{"start":{"line":112,"column":24},"end":{"line":112,"column":40}},"69":{"start":{"line":115,"column":24},"end":{"line":115,"column":79}},"70":{"start":{"line":116,"column":24},"end":{"line":116,"column":34}},"71":{"start":{"line":121,"column":30},"end":{"line":121,"column":57}},"72":{"start":{"line":122,"column":8},"end":{"line":122,"column":36}},"73":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"74":{"start":{"line":126,"column":12},"end":{"line":126,"column":90}},"75":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"76":{"start":{"line":129,"column":12},"end":{"line":129,"column":83}},"77":{"start":{"line":131,"column":8},"end":{"line":131,"column":33}},"78":{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},"79":{"start":{"line":135,"column":12},"end":{"line":135,"column":85}},"80":{"start":{"line":137,"column":8},"end":{"line":137,"column":33}},"81":{"start":{"line":140,"column":25},"end":{"line":140,"column":86}},"82":{"start":{"line":141,"column":28},"end":{"line":141,"column":56}},"83":{"start":{"line":142,"column":8},"end":{"line":142,"column":29}},"84":{"start":{"line":143,"column":8},"end":{"line":149,"column":9}},"85":{"start":{"line":144,"column":12},"end":{"line":144,"column":103}},"86":{"start":{"line":145,"column":12},"end":{"line":145,"column":73}},"87":{"start":{"line":148,"column":12},"end":{"line":148,"column":66}},"88":{"start":{"line":150,"column":8},"end":{"line":150,"column":33}},"89":{"start":{"line":153,"column":8},"end":{"line":165,"column":9}},"90":{"start":{"line":154,"column":12},"end":{"line":154,"column":98}},"91":{"start":{"line":155,"column":31},"end":{"line":155,"column":80}},"92":{"start":{"line":156,"column":29},"end":{"line":156,"column":78}},"93":{"start":{"line":157,"column":31},"end":{"line":157,"column":87}},"94":{"start":{"line":158,"column":12},"end":{"line":158,"column":46}},"95":{"start":{"line":159,"column":12},"end":{"line":159,"column":69}},"96":{"start":{"line":162,"column":12},"end":{"line":164,"column":13}},"97":{"start":{"line":163,"column":16},"end":{"line":163,"column":101}},"98":{"start":{"line":166,"column":8},"end":{"line":166,"column":33}},"99":{"start":{"line":169,"column":8},"end":{"line":169,"column":34}},"100":{"start":{"line":170,"column":8},"end":{"line":170,"column":33}},"101":{"start":{"line":171,"column":8},"end":{"line":171,"column":38}},"102":{"start":{"line":172,"column":8},"end":{"line":172,"column":35}},"103":{"start":{"line":173,"column":20},"end":{"line":173,"column":31}},"104":{"start":{"line":174,"column":8},"end":{"line":198,"column":9}},"105":{"start":{"line":175,"column":12},"end":{"line":178,"column":13}},"106":{"start":{"line":176,"column":16},"end":{"line":176,"column":44}},"107":{"start":{"line":177,"column":16},"end":{"line":177,"column":40}},"108":{"start":{"line":179,"column":29},"end":{"line":179,"column":75}},"109":{"start":{"line":180,"column":31},"end":{"line":180,"column":41}},"110":{"start":{"line":181,"column":12},"end":{"line":184,"column":13}},"111":{"start":{"line":182,"column":16},"end":{"line":182,"column":38}},"112":{"start":{"line":183,"column":16},"end":{"line":183,"column":101}},"113":{"start":{"line":185,"column":33},"end":{"line":185,"column":60}},"114":{"start":{"line":186,"column":12},"end":{"line":188,"column":13}},"115":{"start":{"line":187,"column":16},"end":{"line":187,"column":75}},"116":{"start":{"line":189,"column":35},"end":{"line":189,"column":75}},"117":{"start":{"line":190,"column":12},"end":{"line":192,"column":13}},"118":{"start":{"line":191,"column":16},"end":{"line":191,"column":75}},"119":{"start":{"line":193,"column":12},"end":{"line":193,"column":61}},"120":{"start":{"line":194,"column":12},"end":{"line":194,"column":50}},"121":{"start":{"line":197,"column":12},"end":{"line":197,"column":71}},"122":{"start":{"line":199,"column":24},"end":{"line":199,"column":56}},"123":{"start":{"line":200,"column":8},"end":{"line":200,"column":75}},"124":{"start":{"line":201,"column":8},"end":{"line":201,"column":65}},"125":{"start":{"line":204,"column":8},"end":{"line":204,"column":92}},"126":{"start":{"line":207,"column":8},"end":{"line":207,"column":97}},"127":{"start":{"line":210,"column":8},"end":{"line":210,"column":77}},"128":{"start":{"line":213,"column":0},"end":{"line":213,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":18},"end":{"line":15,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":28},"end":{"line":28,"column":5}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":37},"end":{"line":63,"column":5}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":31},"end":{"line":35,"column":32}},"loc":{"start":{"line":35,"column":43},"end":{"line":51,"column":17}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":27},"end":{"line":74,"column":5}},"line":64},"6":{"name":"(anonymous_6)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":51},"end":{"line":95,"column":5}},"line":75},"7":{"name":"(anonymous_7)","decl":{"start":{"line":77,"column":21},"end":{"line":77,"column":22}},"loc":{"start":{"line":77,"column":40},"end":{"line":93,"column":9}},"line":77},"8":{"name":"(anonymous_8)","decl":{"start":{"line":96,"column":4},"end":{"line":96,"column":5}},"loc":{"start":{"line":96,"column":40},"end":{"line":123,"column":5}},"line":96},"9":{"name":"(anonymous_9)","decl":{"start":{"line":98,"column":29},"end":{"line":98,"column":30}},"loc":{"start":{"line":98,"column":42},"end":{"line":120,"column":9}},"line":98},"10":{"name":"(anonymous_10)","decl":{"start":{"line":100,"column":31},"end":{"line":100,"column":32}},"loc":{"start":{"line":100,"column":43},"end":{"line":118,"column":17}},"line":100},"11":{"name":"(anonymous_11)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":25},"end":{"line":132,"column":5}},"line":124},"12":{"name":"(anonymous_12)","decl":{"start":{"line":133,"column":4},"end":{"line":133,"column":5}},"loc":{"start":{"line":133,"column":29},"end":{"line":138,"column":5}},"line":133},"13":{"name":"(anonymous_13)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":33},"end":{"line":151,"column":5}},"line":139},"14":{"name":"(anonymous_14)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":48},"end":{"line":167,"column":5}},"line":152},"15":{"name":"(anonymous_15)","decl":{"start":{"line":168,"column":4},"end":{"line":168,"column":5}},"loc":{"start":{"line":168,"column":40},"end":{"line":202,"column":5}},"line":168},"16":{"name":"(anonymous_16)","decl":{"start":{"line":203,"column":4},"end":{"line":203,"column":5}},"loc":{"start":{"line":203,"column":28},"end":{"line":205,"column":5}},"line":203},"17":{"name":"(anonymous_17)","decl":{"start":{"line":206,"column":4},"end":{"line":206,"column":5}},"loc":{"start":{"line":206,"column":30},"end":{"line":208,"column":5}},"line":206},"18":{"name":"(anonymous_18)","decl":{"start":{"line":209,"column":4},"end":{"line":209,"column":5}},"loc":{"start":{"line":209,"column":25},"end":{"line":211,"column":5}},"line":209}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":42,"column":24},"end":{"line":44,"column":25}},"type":"if","locations":[{"start":{"line":42,"column":24},"end":{"line":44,"column":25}},{"start":{"line":42,"column":24},"end":{"line":44,"column":25}}],"line":42},"4":{"loc":{"start":{"line":78,"column":26},"end":{"line":87,"column":55}},"type":"binary-expr","locations":[{"start":{"line":78,"column":26},"end":{"line":78,"column":62}},{"start":{"line":79,"column":16},"end":{"line":79,"column":56}},{"start":{"line":80,"column":16},"end":{"line":80,"column":55}},{"start":{"line":81,"column":16},"end":{"line":81,"column":59}},{"start":{"line":82,"column":16},"end":{"line":82,"column":57}},{"start":{"line":83,"column":16},"end":{"line":83,"column":54}},{"start":{"line":84,"column":16},"end":{"line":84,"column":53}},{"start":{"line":85,"column":16},"end":{"line":85,"column":54}},{"start":{"line":86,"column":16},"end":{"line":86,"column":54}},{"start":{"line":87,"column":16},"end":{"line":87,"column":55}}],"line":78},"5":{"loc":{"start":{"line":89,"column":12},"end":{"line":92,"column":13}},"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":92,"column":13}},{"start":{"line":89,"column":12},"end":{"line":92,"column":13}}],"line":89},"6":{"loc":{"start":{"line":99,"column":12},"end":{"line":119,"column":13}},"type":"if","locations":[{"start":{"line":99,"column":12},"end":{"line":119,"column":13}},{"start":{"line":99,"column":12},"end":{"line":119,"column":13}}],"line":99},"7":{"loc":{"start":{"line":99,"column":16},"end":{"line":99,"column":99}},"type":"binary-expr","locations":[{"start":{"line":99,"column":16},"end":{"line":99,"column":25}},{"start":{"line":99,"column":29},"end":{"line":99,"column":63}},{"start":{"line":99,"column":67},"end":{"line":99,"column":99}}],"line":99},"8":{"loc":{"start":{"line":104,"column":24},"end":{"line":106,"column":25}},"type":"if","locations":[{"start":{"line":104,"column":24},"end":{"line":106,"column":25}},{"start":{"line":104,"column":24},"end":{"line":106,"column":25}}],"line":104},"9":{"loc":{"start":{"line":108,"column":24},"end":{"line":110,"column":25}},"type":"if","locations":[{"start":{"line":108,"column":24},"end":{"line":110,"column":25}},{"start":{"line":108,"column":24},"end":{"line":110,"column":25}}],"line":108},"10":{"loc":{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},"type":"if","locations":[{"start":{"line":125,"column":8},"end":{"line":127,"column":9}},{"start":{"line":125,"column":8},"end":{"line":127,"column":9}}],"line":125},"11":{"loc":{"start":{"line":125,"column":12},"end":{"line":125,"column":55}},"type":"binary-expr","locations":[{"start":{"line":125,"column":12},"end":{"line":125,"column":21}},{"start":{"line":125,"column":25},"end":{"line":125,"column":35}},{"start":{"line":125,"column":39},"end":{"line":125,"column":55}}],"line":125},"12":{"loc":{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},"type":"if","locations":[{"start":{"line":128,"column":8},"end":{"line":130,"column":9}},{"start":{"line":128,"column":8},"end":{"line":130,"column":9}}],"line":128},"13":{"loc":{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":136,"column":9}},{"start":{"line":134,"column":8},"end":{"line":136,"column":9}}],"line":134},"14":{"loc":{"start":{"line":162,"column":12},"end":{"line":164,"column":13}},"type":"if","locations":[{"start":{"line":162,"column":12},"end":{"line":164,"column":13}},{"start":{"line":162,"column":12},"end":{"line":164,"column":13}}],"line":162},"15":{"loc":{"start":{"line":175,"column":12},"end":{"line":178,"column":13}},"type":"if","locations":[{"start":{"line":175,"column":12},"end":{"line":178,"column":13}},{"start":{"line":175,"column":12},"end":{"line":178,"column":13}}],"line":175},"16":{"loc":{"start":{"line":181,"column":12},"end":{"line":184,"column":13}},"type":"if","locations":[{"start":{"line":181,"column":12},"end":{"line":184,"column":13}},{"start":{"line":181,"column":12},"end":{"line":184,"column":13}}],"line":181},"17":{"loc":{"start":{"line":186,"column":12},"end":{"line":188,"column":13}},"type":"if","locations":[{"start":{"line":186,"column":12},"end":{"line":188,"column":13}},{"start":{"line":186,"column":12},"end":{"line":188,"column":13}}],"line":186},"18":{"loc":{"start":{"line":190,"column":12},"end":{"line":192,"column":13}},"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":192,"column":13}},{"start":{"line":190,"column":12},"end":{"line":192,"column":13}}],"line":190}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":3,"9":3,"10":4,"11":4,"12":4,"13":4,"14":4,"15":2,"16":2,"17":2,"18":2,"19":2,"20":2,"21":2,"22":2,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":0,"32":1,"33":1,"34":0,"35":2,"36":2,"37":2,"38":1,"39":0,"40":0,"41":2,"42":2,"43":2,"44":2,"45":2,"46":0,"47":0,"48":2,"49":2,"50":826,"51":826,"52":826,"53":826,"54":2,"55":3,"56":3,"57":5,"58":3,"59":3,"60":3,"61":3,"62":3,"63":1,"64":2,"65":2,"66":0,"67":2,"68":2,"69":1,"70":1,"71":3,"72":3,"73":2,"74":0,"75":2,"76":0,"77":2,"78":2,"79":0,"80":2,"81":2,"82":2,"83":2,"84":2,"85":2,"86":2,"87":0,"88":2,"89":2,"90":2,"91":2,"92":2,"93":2,"94":2,"95":2,"96":0,"97":0,"98":2,"99":2,"100":2,"101":2,"102":2,"103":2,"104":2,"105":2,"106":2,"107":2,"108":2,"109":2,"110":2,"111":0,"112":0,"113":2,"114":2,"115":0,"116":2,"117":2,"118":0,"119":2,"120":2,"121":0,"122":2,"123":2,"124":2,"125":0,"126":0,"127":0,"128":1},"f":{"0":3,"1":3,"2":4,"3":2,"4":1,"5":2,"6":2,"7":826,"8":3,"9":5,"10":3,"11":2,"12":2,"13":2,"14":2,"15":2,"16":0,"17":0,"18":0},"b":{"0":[1,1,1],"1":[1,2],"2":[3,3],"3":[0,1],"4":[826,826,826,826,826,826,826,826,826,826],"5":[826,0],"6":[3,2],"7":[5,5,3],"8":[1,2],"9":[0,2],"10":[0,2],"11":[2,2,2],"12":[0,2],"13":[0,2],"14":[0,0],"15":[2,0],"16":[0,2],"17":[0,2],"18":[0,2]},"inputSourceMap":{"version":3,"file":"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/InsightFacade.ts","sources":["/Users/liuhongkai/CPSC310_project/project_team051/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import { IInsightFacade, InsightDataset, InsightDatasetKind, InsightResult, InsightError,\n\tNotFoundError,\n\tResultTooLargeError } from \"./IInsightFacade\";\nimport JSZip = require(\"jszip\")\nimport fs from \"fs-extra\";\nimport path from \"node:path\";\nimport Section from './Section';\n\n\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\tprivate datasets: Map<string, Section[]> = new Map<string, Section[]>();\n\tprivate initialized = false;\n\n\tconstructor() {\n\t\t//\n\t}\n\n\tprivate async readIdsFromFile(): Promise<string[]> {\n\t\tlet paresedData: string[] = [];\n\t\ttry {\n\t\t\tawait fs.ensureDir(path.join(__dirname, \"../../data\"));\n\t\t\tconst idFilePath = path.join(__dirname, '../../data/id_log.json'); // first\n\t\t\tconst fileContent = await fs.readFile(idFilePath, 'utf8');\n\t\t\tparesedData = JSON.parse(fileContent);\n\t\t\treturn paresedData;\n\t\t} catch (err) {\n\t\t\t// console.error(\"Error reading id_log.json:\", err);\n\t\t\treturn paresedData;\n\t\t}\n\n\t}\n\n\tprivate async processStoredZipFiles(ids: string[]): Promise<void> {\n\t\tawait fs.ensureDir(path.join(__dirname, \"../../data\"));\n\t\tconst folderPath = path.join(__dirname, '../../data');\n\t\tconst promises: Promise<Section[]>[] = [];\n\t\t// 读取 data 文件夹中的文件\n\t\ttry {\n\t\t\tfor (const id of ids) {\n\t\t\t\tpromises.push(\n\t\t\t\t\t(async (): Promise<Section[]> => {\n\t\t\t\t\t\tconst zip = new JSZip();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst buffer = await fs.readFile(path.join(folderPath, `${id}.zip`));  // 拼接路径\n\t\t\t\t\t\t\tconst content = buffer.toString(\"base64\");\n\t\t\t\t\t\t\tconst unzipped = await zip.loadAsync(content, { base64: true });\n\t\t\t\t\t\t\tconst courseFolder = unzipped.folder(\"courses/\");\n\t\t\t\t\t\t\tif (courseFolder === null) {\n\t\t\t\t\t\t\t\tthrow new Error(`No courses folder found in ${id}.zip`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst sections = await this.parseJsonHelper(courseFolder);\n\t\t\t\t\t\t\treturn sections;\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t// console.error(`Error processing ${id}.zip:`, err);\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t})()\n\t\t\t\t);\n\t\t\t}\n\t\t\t// 等待所有 Promise 完成\n\t\t\tconst arrayOfSectionsArray: Section[][] = await Promise.all(promises);\n\t\t\t// 将结果存入 this.datasets\n\t\t\tfor (let i = 0; i < ids.length; i++) {\n\t\t\t\tthis.datasets.set(ids[i], arrayOfSectionsArray[i]);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error(\"Error during processing zip files:\", err);\n\t\t\tthrow err;  // 抛出错误\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate async initialization(): Promise<void> {\n\t\ttry {\n\t\t\t// 读取 ids\n\t\t\tconst ids = await this.readIdsFromFile();\n\n\t\t\t// 处理 zip 文件\n\t\t\tawait this.processStoredZipFiles(ids);\n\n\t\t\tconsole.log(\"Initialization completed successfully.\");\n\t\t} catch (err) {\n\t\t\tconsole.error(\"Initialization failed:\", err);\n\t\t\tthrow err;  // 抛出错误以供外部处理\n\t\t}\n\t}\n\n\n\n\tprivate validateAndExtractSectionQueryableFields(data:any[]): Section[]{\n\t\tconst sections: Section[] = [];\n\t\tdata.forEach((singleSection) => {\n\t\t\tconst valid:boolean = typeof singleSection.id === 'number' &&\n\t\t\t\ttypeof singleSection.Course === 'string' &&\n\t\t\t\ttypeof singleSection.Title === 'string' &&\n\t\t\t\ttypeof singleSection.Professor === 'string' &&\n\t\t\t\ttypeof singleSection.Subject === 'string' &&\n\t\t\t\ttypeof singleSection.Year === 'string' &&\n\t\t\t\ttypeof singleSection.Avg === 'number' &&\n\t\t\t\ttypeof singleSection.Pass === 'number' &&\n\t\t\t\ttypeof singleSection.Fail === 'number' &&\n\t\t\t\ttypeof singleSection.Audit === 'number';\n\n\t\t\tlet section;\n\t\t\tif (valid === true) {\n\t\t\t\tsection = new Section(singleSection.id.toString(), singleSection.Course, singleSection.Title,\n\t\t\t\t\tsingleSection.Professor, singleSection.Subject, parseInt(singleSection.Year, 10),\n\t\t\t\t\tsingleSection.Avg, singleSection.Pass,\n\t\t\t\t\tsingleSection.Fail, singleSection.Audit)\n\t\t\t\tsections.push(section);\n\t\t\t}\n\t\t\t// } else {\n\t\t\t// \t// testing\n\t\t\t// \tconst isIdValid: boolean = typeof singleSection.id === 'number';\n\t\t\t// \tconst isCourseValid: boolean = typeof singleSection.Course === 'string';\n\t\t\t// \tconst isTitleValid: boolean = typeof singleSection.Title === 'string';\n\t\t\t// \tconst isProfessorValid: boolean = typeof singleSection.Professor === 'string';\n\t\t\t// \tconst isSubjectValid: boolean = typeof singleSection.Subject === 'string';\n\t\t\t// \tconst isYearValid: boolean = typeof singleSection.Year === 'string';\n\t\t\t// \tconst isAvgValid: boolean = typeof singleSection.Avg === 'number';\n\t\t\t// \tconst isPassValid: boolean = typeof singleSection.Pass === 'number';\n\t\t\t// \tconst isFailValid: boolean = typeof singleSection.Fail === 'number';\n\t\t\t// \tconst isAuditValid: boolean = typeof singleSection.Audit === 'number';\n\t\t\t// \tconsole.log(\"start\");\n\t\t\t// \tconsole.log('id is valid:', isIdValid);\n\t\t\t// \tconsole.log('Course is valid:', isCourseValid);\n\t\t\t// \tconsole.log('Title is valid:', isTitleValid);\n\t\t\t// \tconsole.log('Professor is valid:', isProfessorValid);\n\t\t\t// \tconsole.log('Subject is valid:', isSubjectValid);\n\t\t\t// \tconsole.log('Year is valid:', isYearValid);\n\t\t\t// \tconsole.log('Avg is valid:', isAvgValid);\n\t\t\t// \tconsole.log('Pass is valid:', isPassValid);\n\t\t\t// \tconsole.log('Fail is valid:', isFailValid);\n\t\t\t// \tconsole.log('Audit is valid:', isAuditValid);\n\t\t\t// }\n\t\t})\n\t\treturn sections;\n\t}\n\n\tprivate async parseJsonHelper(courseFolder: JSZip): Promise<Section[]> {\n\t\t// Create an array to hold promises for each file\n\t\tconst promises: Promise<Section[]>[] = [];\n\t\t// Iterate through each file in the 'courses/' folder\n\t\tcourseFolder.forEach((_, file: JSZip.JSZipObject) => {\n\t\t\t// Ensure file starts with courses/ and is not a directory\n\t\t\tif (!file.dir && !file.name.startsWith('courses/.') && file.name.startsWith('courses/')) {\n\t\t\t\t// Push a promise to the array for processing the file\n\t\t\t\tpromises.push(\n\t\t\t\t\t(async ():Promise<Section[]> => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Read the file content as a string\n\t\t\t\t\t\t\tconst fileContent = await file.async('string');\n\t\t\t\t\t\t\t// Parse the JSON content\n\t\t\t\t\t\t\tconst parsedData = JSON.parse(fileContent);\n\t\t\t\t\t\t\t// Check if the parsed JSON contains the 'result' field\n\t\t\t\t\t\t\tif (parsedData.result === undefined) {\n\t\t\t\t\t\t\t\tthrow new InsightError(\"Result is undefined\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Validate and extract sections\n\t\t\t\t\t\t\tconst sections = this.validateAndExtractSectionQueryableFields(parsedData.result);\n\t\t\t\t\t\t\tif (sections.length === 0) {\n\t\t\t\t\t\t\t\tthrow new InsightError(\"No valid sections\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Return the valid sections\n\t\t\t\t\t\t\tconsole.log(`Successfully parsed: ${file.name}`);\n\t\t\t\t\t\t\treturn sections;\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.error(`Error parsing file ${file.name}:`, err);\n\t\t\t\t\t\t\treturn [];  // Return an empty array if an error occurs to avoid failing Promise.all\n\t\t\t\t\t\t}\n\t\t\t\t\t})()\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\t// Wait for all promises to resolve using Promise.all\n\t\tconst sectionsArray = await Promise.all(promises);\n\t\t// Flatten the array of sections and return the result\n\t\treturn sectionsArray.flat();\n\t}\n\n\n\tprivate async validateID(id: string): Promise<void>{\n\t\tif (id === \"\" || id === \" \" || id.includes(\"_\")){\n\t\t\treturn Promise.reject(new InsightError(\"Invalid ID string\"));\n\t\t}\n\n\t\tif (Array.from(this.datasets.keys()).includes(id)){\n\t\t\treturn Promise.reject(new InsightError(\"ID is used\"));\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\n\tprivate async validateKind(kind: InsightDatasetKind): Promise<void>{\n\t\tif (kind !== InsightDatasetKind.Sections) {\n\t\t\treturn Promise.reject(new InsightError(\"Invalid Kind\"));\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate async updateIdToJsonFile(id:string): Promise<void> {\n\t\tconst filePath = path.join(__dirname, '../../data/id_log.json');\n\t\tconst paresedData: string[] = await this.readIdsFromFile();\n\t\tparesedData.push(id);\n\t\ttry {\n\t\t\tawait fs.writeFile(filePath, JSON.stringify(paresedData, null, 2), 'utf8');\n\t\t\tconsole.log(`New id_log has been added successfully: ${id}`);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(\"Failed to updateIdToJsonFile\");\n\t\t}\n\t\treturn Promise.resolve()\n\t}\n\n\tprivate async writeDatasetIntoZip(id:string ,courseFolder: JSZip): Promise<void>{\n\t\ttry {\n\t\t\tawait fs.ensureDir(path.join(__dirname, \"../../data\"));\n\t\t\tconst folderPath = path.join(__dirname, '../../data');\n\t\t\tconst filePath = path.join(folderPath, `${id}.zip`);\n\t\t\t// console.log(\"writeDatasetIntoZip start\")\n\t\t\tconst zipContent = await courseFolder.generateAsync({ type: 'nodebuffer' });\n\t\t\t// console.log(\"writeDatasetIntoZip generateAsync\")\n\t\t\t// console.log(__dirname);\n\t\t\t// Write the content to a zip file and update id log\n\t\t\tawait this.updateIdToJsonFile(id);\n\t\t\tawait fs.writeFile(filePath, zipContent);\n\t\t\t// console.log(\"writeDatasetIntoZip writeFile\")\n\t\t\t// console.log(`Zip file created: ${id}.zip`);\n\t\t} catch (err) {\n\t\t\tif (err) {\n\t\t\t\treturn Promise.reject(new InsightError(\"Failed to save .zip file\"))\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\n\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\t// check if id is valid\n\t\tawait this.validateID(id);\n\t\tconsole.log('id passed')\n\t\t// check if kind === InsightDatasetKind.Sections\n\t\tawait this.validateKind(kind);\n\t\tconsole.log('kind passed')\n\t\tconst zip: JSZip = new JSZip()\n\t\ttry {\n\t\t\tif (this.initialized === false){\n\t\t\t\tawait this.initialization();\n\t\t\t\tthis.initialized = true;\n\t\t\t}\n\t\t\tconst unzipped = await zip.loadAsync(content, {base64: true})\n\t\t\t// console.log('loaded')\n\t\t\t// if no courses folder, throw an error\n\t\t\tconst folderName = 'courses/';\n\t\t\t// check if courses folder exists\n\t\t\tif (!Object.prototype.hasOwnProperty.call(unzipped.files, folderName)) {\n\t\t\t\tconsole.log('failed')\n\t\t\t\treturn Promise.reject(new InsightError(\"No courses folder exists\"));\n\t\t\t}\n\t\t\t// console.log('courses folder found 1')\n\t\t\t// parse folder file into section[]\n\t\t\tconst courseFolder = unzipped.folder(folderName);\n\t\t\tif (courseFolder === null) {\n\t\t\t\treturn Promise.reject(new InsightError());\n\t\t\t}\n\t\t\t// console.log('courses folder found 2')\n\t\t\tconst parsedSections: Section[] = await this.parseJsonHelper(courseFolder);\n\t\t\tif (parsedSections.length === 0){\n\t\t\t\treturn Promise.reject(new InsightError());\n\t\t\t}\n\t\t\t// addDataset and save .zip file for persistence\n\t\t\t// console.log(`length, ${parsedSections.length}`)\n\t\t\tawait this.writeDatasetIntoZip(id, courseFolder);\n\t\t\tthis.datasets.set(id, parsedSections);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(new InsightError());\n\t\t}\n\t\tconst message = Array.from(this.datasets.keys())\n\t\tconsole.log(`returning message has a length of ${message.length}`)\n\t\treturn Promise.resolve(Array.from(this.datasets.keys()));\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\t// TODO: Remove this once you implement the methods!\n\t\tthrow new Error(`InsightFacadeImpl::removeDataset() is unimplemented! - id=${id};`);\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\t// TODO: Remove this once you implement the methods!\n\t\tthrow new Error(`InsightFacadeImpl::performQuery() is unimplemented! - query=${query};`);\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\t// TODO: Remove this once you implement the methods!\n\t\tthrow new Error(`InsightFacadeImpl::listDatasets is unimplemented!`);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9f32c432692b3f37cf189913d2225cd9938961d5","contentHash":"dd0b0bbee61a51644ab96b0c91fa7daa033e511e86bb18ba1cc8a47ba3c45675"},"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/Section.ts":{"path":"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/Section.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":15,"column":8},"end":{"line":15,"column":25}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":21}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":27}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":37}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":25}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":23}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":25}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":25}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":27}},"11":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"12":{"start":{"line":30,"column":8},"end":{"line":30,"column":23}},"13":{"start":{"line":33,"column":8},"end":{"line":33,"column":26}},"14":{"start":{"line":36,"column":8},"end":{"line":36,"column":31}},"15":{"start":{"line":39,"column":8},"end":{"line":39,"column":25}},"16":{"start":{"line":42,"column":8},"end":{"line":42,"column":25}},"17":{"start":{"line":45,"column":8},"end":{"line":45,"column":24}},"18":{"start":{"line":48,"column":8},"end":{"line":48,"column":25}},"19":{"start":{"line":51,"column":8},"end":{"line":51,"column":25}},"20":{"start":{"line":54,"column":8},"end":{"line":54,"column":26}},"21":{"start":{"line":57,"column":0},"end":{"line":57,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":81},"end":{"line":25,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":14},"end":{"line":28,"column":5}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":12},"end":{"line":31,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":15},"end":{"line":34,"column":5}},"line":32},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":20},"end":{"line":37,"column":5}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":14},"end":{"line":40,"column":5}},"line":38},"6":{"name":"(anonymous_6)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":14},"end":{"line":43,"column":5}},"line":41},"7":{"name":"(anonymous_7)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":13},"end":{"line":46,"column":5}},"line":44},"8":{"name":"(anonymous_8)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":14},"end":{"line":49,"column":5}},"line":47},"9":{"name":"(anonymous_9)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":14},"end":{"line":52,"column":5}},"line":50},"10":{"name":"(anonymous_10)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":15},"end":{"line":55,"column":5}},"line":53}},"branchMap":{},"s":{"0":1,"1":826,"2":826,"3":826,"4":826,"5":826,"6":826,"7":826,"8":826,"9":826,"10":826,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1},"f":{"0":826,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/liuhongkai/CPSC310_project/project_team051/src/controller/Section.ts","sources":["/Users/liuhongkai/CPSC310_project/project_team051/src/controller/Section.ts"],"names":[],"mappings":";;AAAA,MAAqB,OAAO;IACP,IAAI,CAAS;IACb,EAAE,CAAS;IACX,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,IAAI,CAAS;IACb,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IAI/B,YAAY,IAAY,EAAC,EAAU,EAAE,KAAa,EAAE,UAAkB,EAAE,IAAY,EACxE,IAAY,EAAE,GAAW,EAAE,IAAY,EAAE,IAAY,EAAE,KAAa;QAC5E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAGM,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAGM,KAAK;QACR,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAGM,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAGM,aAAa;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAGM,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAGM,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAGM,MAAM;QACT,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAGM,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAGM,OAAO;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAGM,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;CACJ;AA7ED,0BA6EC","sourcesContent":["export default class Section {\n    private readonly uuid: string;\n    private readonly id: string;\n    private readonly title: string;\n    private readonly instructor: string;\n    private readonly dept: string;\n    private readonly year: number;\n    private readonly avg: number;\n    private readonly pass: number;\n    private readonly fail: number;\n    private readonly audit: number;\n\n\n\n    constructor(uuid: string,id: string, title: string, instructor: string, dept: string,\n                year: number, avg: number, pass: number, fail: number, audit: number) {\n        this.uuid = uuid;\n        this.id = id;\n        this.title = title;\n        this.instructor = instructor;\n        this.dept = dept;\n        this.year = year;\n        this.avg = avg;\n        this.pass = pass;\n        this.fail = fail;\n        this.audit = audit;\n    }\n\n    // Getter for uuid\n    public getUuid(): string {\n        return this.uuid;\n    }\n\n    // Getter for id\n    public getId(): string {\n        return this.id;\n    }\n\n    // Getter for title\n    public getTitle(): string {\n        return this.title;\n    }\n\n    // Getter for instructor\n    public getInstructor(): string {\n        return this.instructor;\n    }\n\n    // Getter for dept (department)\n    public getDept(): string {\n        return this.dept;\n    }\n\n    // Getter for year\n    public getYear(): number {\n        return this.year;\n    }\n\n    // Getter for avg (average)\n    public getAvg(): number {\n        return this.avg;\n    }\n\n    // Getter for pass\n    public getPass(): number {\n        return this.pass;\n    }\n\n    // Getter for fail\n    public getFail(): number {\n        return this.fail;\n    }\n\n    // Getter for audit\n    public getAudit(): number {\n        return this.audit;\n    }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"62450ea9fc34a19fed6ace6fb97e28653013c194","contentHash":"ae9c5b8a6aaac8b0b15c6f5aaad69e9c8908ad1d549e548010ceb6379cf1aa24"}}